{"version":3,"sources":["Icons.js","Map.js","App.js","reportWebVitals.js","index.js"],"names":["blueIcon","L","Icon","iconUrl","shadowUrl","iconSize","iconAnchor","popupAnchor","shadowSize","redIcon","Map","state","hasLocation","latlng","lat","lng","mapRef","createRef","removeMarker","current","leafletElement","closePopup","setState","handleClick","map","locate","flyTo","handleLocationFound","e","marker","this","Marker","position","icon","removable","editable","removalCallback","doubleClickZoom","id","zoom","center","onLocationfound","ref","TileLayer","attribution","url","markerIcon","onClick","Component","App","rootElement","document","getElementById","ReactDOM","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"gTAEaA,EAAW,IAAIC,IAAEC,KAAK,CAC/BC,QAAS,0FACTC,UAAW,gFACXC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAI,IAClBC,WAAY,CAAC,GAAI,MAGRC,EAAU,IAAIR,IAAEC,KAAK,CAC9BC,QAAS,yFACTC,UAAW,gFACXC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAI,IAClBC,WAAY,CAAC,GAAI,M,QCmENE,E,4MAlEXC,MAAQ,CACJC,aAAa,EACbC,OAAQ,CACJC,IAAK,QACLC,IAAK,U,EAGbC,OAASC,sB,EAETC,aAAe,WACX,EAAKF,OAAOG,QAAQC,eAAeC,aAEnC,EAAKC,SAAS,CACVV,aAAa,EACbC,OAAQ,Q,EAIhBU,YAAc,WACV,IAAMC,EAAM,EAAKR,OAAOG,QACb,MAAPK,GACAA,EAAIJ,eAAeK,SAEnB,EAAKd,MAAMC,aACXY,EAAIJ,eAAeM,MAAM,EAAKf,MAAME,OAAO,K,EAMnDc,oBAAsB,SAACC,GACnB,EAAKN,SAAS,CACVV,aAAa,EACbC,OAAQe,EAAEf,SAEd,EAAKG,OAAOG,QAAQC,eAAeM,MAAM,EAAKf,MAAME,OAAO,K,uDAGtD,IAAD,OACEgB,EAASC,KAAKnB,MAAMC,YACtB,cAACmB,EAAA,EAAD,CAAQC,SAAUF,KAAKnB,MAAME,OAAQoB,KAAMjC,EAA3C,SACI,cAAC,IAAD,CAAOkC,WAAS,EAACC,UAAQ,EAClBC,gBAAkB,WAAQ,EAAKlB,gBADtC,+CAKJ,KACJ,OACI,eAAC,IAAD,CAAYmB,iBAAiB,EAAOC,GAAG,QAAQC,KAAM,GAAIC,OAAQ,CAAC,GAAG,OACzDC,gBAAiBX,KAAKH,oBACtBe,IAAKZ,KAAKd,OAFtB,UAII,cAAC2B,EAAA,EAAD,CAAWC,YAAY,yEACZC,IAAI,uDACdhB,EACD,cAAC,IAAD,CAAQG,SAAS,UAAUc,WAAYrC,EAAS8B,KAAM,KACtD,wBAAQD,GAAG,SAASS,QAAUjB,KAAKP,YAAnC,qC,GA1DEyB,a,YCRlB,SAASC,IACP,OACI,cAAC,EAAD,IAIN,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAO,cAAC,EAAD,IAASJ,GAGVD,QCNAM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdH,IAASC,OACP,cAAC,IAAMU,WAAP,UACE,cAAC,EAAD,MAEFb,SAASC,eAAe,SAM1BG,M","file":"static/js/main.37568606.chunk.js","sourcesContent":["import L from 'leaflet';\r\n\r\nexport const blueIcon = new L.Icon({\r\n    iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-blue.png',\r\n    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\r\n    iconSize: [25, 41],\r\n    iconAnchor: [12, 41],\r\n    popupAnchor: [1, -34],\r\n    shadowSize: [41, 41]\r\n});\r\n\r\nexport const redIcon = new L.Icon({\r\n    iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',\r\n    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\r\n    iconSize: [25, 41],\r\n    iconAnchor: [12, 41],\r\n    popupAnchor: [1, -34],\r\n    shadowSize: [41, 41]\r\n});","import React, { createRef, Component } from 'react'\r\nimport { Map as LeafletMap, TileLayer, Marker } from 'react-leaflet'\r\nimport Popup from 'react-leaflet-editable-popup'\r\nimport {blueIcon,redIcon} from './Icons'\r\nimport Search from \"react-leaflet-search\";\r\n\r\n\r\ntype State = {\r\n    hasLocation: boolean,\r\n    latlng: {\r\n        lat: number,\r\n        lng: number,\r\n    },\r\n}\r\n\r\n\r\nclass Map extends Component<{},State>{\r\n\r\n    state = {\r\n        hasLocation: false,\r\n        latlng: {\r\n            lat: 38.0018,\r\n            lng: 23.7423,\r\n        },\r\n    }\r\n    mapRef = createRef();\r\n\r\n    removeMarker = () => {\r\n        this.mapRef.current.leafletElement.closePopup()\r\n\r\n        this.setState({\r\n            hasLocation: false,\r\n            latlng: null\r\n        })\r\n    }\r\n\r\n    handleClick = () => {\r\n        const map = this.mapRef.current\r\n        if (map != null) {\r\n            map.leafletElement.locate()\r\n        }\r\n        if (this.state.hasLocation){\r\n            map.leafletElement.flyTo(this.state.latlng,13)\r\n        }\r\n\r\n\r\n\r\n    }\r\n    handleLocationFound = (e: Object) => {\r\n        this.setState({\r\n            hasLocation: true,\r\n            latlng: e.latlng,\r\n        })\r\n        this.mapRef.current.leafletElement.flyTo(this.state.latlng,13)\r\n    }\r\n\r\n    render(){\r\n        const marker = this.state.hasLocation ? (\r\n            <Marker position={this.state.latlng} icon={blueIcon}>\r\n                <Popup removable editable\r\n                       removalCallback={ () => { this.removeMarker() } }>\r\n                    You are here and can edit this!\r\n                </Popup>\r\n            </Marker>\r\n        ) : null\r\n        return (\r\n            <LeafletMap doubleClickZoom={false} id=\"mapId\" zoom={11} center={[38,23.74]}\r\n                        onLocationfound={this.handleLocationFound}\r\n                        ref={this.mapRef}>\r\n\r\n                <TileLayer attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                           url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\r\n                {marker}\r\n                <Search position=\"topleft\" markerIcon={redIcon} zoom={14}/>\r\n                <button id=\"findMe\" onClick={ this.handleClick }>Find my location</button>\r\n            </LeafletMap>\r\n\r\n\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Map","import './App.css';\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport Map from './Map'\r\nimport '../node_modules/leaflet/dist/leaflet.css'\r\nimport '../node_modules/react-leaflet-search/css/index.css'\r\n\r\nfunction App() {\r\n  return (\r\n      <Map />\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}